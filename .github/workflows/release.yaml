name: Create Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
      name: New Release
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Create Release
          id: create_release
          uses: actions/create-release@latest
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tag_name: ${{ github.ref }}
            release_name: ${{ github.ref }}
            draft: false
            prerelease: false

        - name: Get the version
          id: get_version
          run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

        - name: Build on Linux
          run: |
            sudo apt-get install docker
            sudo docker build -t vidify .
            sudo docker run -v $PWD/dev:/vidify/dev/dist vidify:latest /bin/sh -c 'cd dev; bash build_linux.sh'

        - name: Upload Linux Release Assets
          id: upload-release-asset 
          uses: actions/upload-release-asset@v1.0.1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: dev/vidify-${{ steps.get_version.outputs.VERSION }}_linux_x86_64.zip
            asset_name: vidify-${{ steps.get_version.outputs.VERSION }}_linux_x86_64.zip
            asset_content_type: application/zip

        - name: Upload to PyPi
          env:
            TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
            TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
          run: |
            sudo docker run vidify:latest /bin/sh -c \
              "pip install twine; \
              python setup.py sdist bdist_wheel; \
              export TWINE_USERNAME=$TWINE_USERNAME; export TWINE_PASSWORD=$TWINE_PASSWORD;\
              twine upload dist/*"
